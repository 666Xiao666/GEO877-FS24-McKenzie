def manhattan_distance(p1, p2):
    """Calculate Manhattan distance between two points."""
    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])

def find_routes(current, end, path, visited):
    """Recursive function to find all routes from start to end."""
    if current == end:
        return [path[:]]  # Return a copy of the current path
    
    routes = []
    directions = [(0, 0.0005), (0.00051, 0), (0, -0.0005), (-0.00051 , 0)]  # (North, East, South, West)
    for direction in directions:
        next_point = (current[0] + direction[0], current[1] + direction[1])
        if next_point in bike_stations and next_point not in visited:
            visited.add(next_point)
            path.append(next_point)
            routes.extend(find_routes(next_point, end, path, visited))
            path.pop()
            visited.remove(next_point)
    return routes

def minimize_turns(routes):
    """Choose the path with the minimum number of turns."""
    min_turns_path = None
    min_turns = float('inf')
    for route in routes:
        turns = 0
        last_direction = None
        for i in range(1, len(route)):
            current_direction = (route[i][0] - route[i-1][0], route[i][1] - route[i-1][1])
            if last_direction and last_direction != current_direction:
                turns += 1
            last_direction = current_direction
        
        if turns < min_turns or (turns == min_turns and not min_turns_path):
            min_turns = turns
            min_turns_path = route
    return min_turns_path

# Example bike stations points, assuming these are coordinates on a grid
bike_stations = {(39.987643, -82.983330), (39.987039, -82.983869), (39.987039, -82.943869)}

# Define start and end points
start_point = (39.987643, -82.983330)
end_point = (39.987039, -82.983869)

# Find all routes from start to end
all_routes = find_routes(start_point, end_point, [start_point], {start_point})

# Find the optimal route with the minimum number of turns
optimal_route = minimize_turns(all_routes)

print("Optimal Route:", optimal_route)
